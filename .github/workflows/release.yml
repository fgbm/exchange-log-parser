name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

env:
  BINARY_NAME: exchange-log-parser

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_tag: ${{ steps.get_tag.outputs.TAG }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Changelog
        id: changelog
        uses: orhun/git-cliff-action@v3
        with:
          config: cliff.toml
          args: --verbose --strip header
        env:
          GITHUB_REPO: ${{ github.repository }}

      - name: Get tag name
        id: get_tag
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_tag.outputs.TAG }}
          name: Release ${{ steps.get_tag.outputs.TAG }}
          body: ${{ steps.changelog.outputs.content }}
          draft: false
          prerelease: false

  build-release-assets:
    name: Build Release Assets
    needs: create-release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - name: Build binary
        run: cargo build --release

      - name: Prepare artifact
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            7z a ${{ env.BINARY_NAME }}-${{ needs.create-release.outputs.release_tag }}-${{ runner.os }}.zip target/release/${{ env.BINARY_NAME }}.exe
          else
            tar czvf ${{ env.BINARY_NAME }}-${{ needs.create-release.outputs.release_tag }}-${{ runner.os }}.tar.gz -C target/release ${{ env.BINARY_NAME }}
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.BINARY_NAME }}-${{ needs.create-release.outputs.release_tag }}-${{ runner.os }}${{ matrix.os == 'windows-latest' && '.zip' || '.tar.gz' }}
          asset_name: ${{ env.BINARY_NAME }}-${{ needs.create-release.outputs.release_tag }}-${{ runner.os }}${{ matrix.os == 'windows-latest' && '.zip' || '.tar.gz' }}
          asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}
